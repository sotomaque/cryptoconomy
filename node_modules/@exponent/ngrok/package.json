{
  "_args": [
    [
      {
        "raw": "@exponent/ngrok@2.2.7",
        "scope": "@exponent",
        "escapedName": "@exponent%2fngrok",
        "name": "@exponent/ngrok",
        "rawSpec": "2.2.7",
        "spec": "2.2.7",
        "type": "version"
      },
      "/Users/enrique/Desktop/crypto-markets/node_modules/xdl"
    ]
  ],
  "_from": "@exponent/ngrok@2.2.7",
  "_id": "@exponent/ngrok@2.2.7",
  "_inCache": true,
  "_location": "/@exponent/ngrok",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ngrok-2.2.7.tgz_1489707011119_0.6648211739957333"
  },
  "_npmUser": {
    "name": "dikaiosune",
    "email": "adam.n.perry@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@exponent/ngrok@2.2.7",
    "scope": "@exponent",
    "escapedName": "@exponent%2fngrok",
    "name": "@exponent/ngrok",
    "rawSpec": "2.2.7",
    "spec": "2.2.7",
    "type": "version"
  },
  "_requiredBy": [
    "/xdl"
  ],
  "_resolved": "https://registry.npmjs.org/@exponent/ngrok/-/ngrok-2.2.7.tgz",
  "_shasum": "37fe66f922b1003da2a78c66b7d4d3bc9313e423",
  "_shrinkwrap": null,
  "_spec": "@exponent/ngrok@2.2.7",
  "_where": "/Users/enrique/Desktop/crypto-markets/node_modules/xdl",
  "author": {
    "name": "bubenshchykov"
  },
  "bin": {
    "ngrok": "./bin/ngrok"
  },
  "bugs": {
    "url": "https://github.com/exponent/ngrok/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "decompress-zip": "^0.3.0",
    "lock": "^0.1.2",
    "request": "^2.81.0",
    "uuid": "^3.0.0"
  },
  "description": "node wrapper for ngrok",
  "devDependencies": {
    "chai": "~1.8.1",
    "homedir": "^0.6.0",
    "mocha": "~1.14.0"
  },
  "directories": {},
  "dist": {
    "shasum": "37fe66f922b1003da2a78c66b7d4d3bc9313e423",
    "tarball": "https://registry.npmjs.org/@exponent/ngrok/-/ngrok-2.2.7.tgz"
  },
  "files": [
    "index.js",
    "postinstall.js",
    "bin"
  ],
  "gitHead": "541aac1b5822c818add7dccd87ab8d8f0f009c3c",
  "homepage": "https://github.com/exponent/ngrok#readme",
  "keywords": [
    "ngrok",
    "localhost",
    "tunneling",
    "localtunnel",
    "webhook"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "exponent",
      "email": "exponent.team@gmail.com"
    }
  ],
  "name": "@exponent/ngrok",
  "optionalDependencies": {},
  "readme": "ngrok [![Build Status](https://travis-ci.org/bubenshchykov/ngrok.png?branch=master)](https://travis-ci.org/bubenshchykov/ngrok)\n=====\n\n![alt ngrok.com](https://ngrok.com/static/img/overview.png)\n\nNgrok exposes your localhost to the web. https://ngrok.com/\n\nusage\n===\n\n[![NPM](https://nodei.co/npm/ngrok.png?global=true&&downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/ngrok/)\n\n```\nvar ngrok = require('ngrok');\nngrok.connect(function (err, url) {});\n\nor\n\nnpm install ngrok -g\nngrok http 8080\n```\n\n## authtoken\nYou can create basic http-https-tcp tunnel without authtoken. For custom subdomains and more you should  obtain authtoken by signing up at [ngrok.com](https://ngrok.com). Once you set it, it's stored in ngrok config and used for all tunnels. Few ways:\n\n```\nngrok.authtoken(token, function(err, token) {});\nngrok.connect({authtoken: token, ...}, function (err, url) {});\nngrok authtoken <token>\n```\n\n## connect\n```javascript\nvar ngrok = require('ngrok');\n\nngrok.connect(function (err, url) {}); // https://757c1652.ngrok.io -> http://localhost:80\nngrok.connect(9090, function (err, url) {}); // https://757c1652.ngrok.io -> http://localhost:9090\nngrok.connect({proto: 'tcp', addr: 22}, function (err, url) {}); // tcp://0.tcp.ngrok.io:48590\nngrok.connect(opts, function(err, url) {});\n```\n\n## options\n```javascript\nngrok.connect({\n\tproto: 'http', // http|tcp|tls\n\taddr: 8080, // port or network address\n\tauth: 'user:pwd', // http basic authentication for tunnel\n\tsubdomain: 'alex', // reserved tunnel name https://alex.ngrok.io\n\tauthtoken: '12345', // your authtoken from ngrok.com\n\tregion: 'us' // one of ngrok regions (us, eu, au, ap), defaults to us\n}, function (err, url) {});\n```\n\nOther options: `name, inspect, host_header, bind_tls, hostname, crt, key, client_cas, remote_addr` - read [here](https://ngrok.com/docs)\n\nNote on regions: region used in first tunnel will be used for all next tunnels too.\n\n## disconnect\nThe ngrok and all tunnels will be killed when node process is done. To stop the tunnels use\n```javascript\nngrok.disconnect(url); // stops one\nngrok.disconnect(); // stops all\nngrok.kill(); // kills ngrok process\n```\n\nNote on http tunnels: by default bind_tls is true, so whenever you use http proto two tunnels are created - http and https. If you disconnect https tunnel, http tunnel remains open. You might want to close them both by passing http-version url, or simply by disconnecting all in one go ```ngrok.disconnect()```.\n\n## emitter\nAlso you can use ngrok as an event emitter, it fires \"connect\", \"disconnect\" and \"error\" events\n```javascript\nngrok.once('connect', function (url) {};\nngrok.connect(port);\n```\n\n## configs\nYou can use ngrok's [configurations files](https://ngrok.com/docs#config), then just pass `name` option when making a tunnel. Configuration files allow to specify more options, eg ngrok region you want to use.\n```\nOS X\t/Users/example/.ngrok2/ngrok.yml\nLinux\t/home/example/.ngrok2/ngrok.yml\nWindows\tC:\\Users\\example\\.ngrok2\\ngrok.yml\n```\n\n## inspector\nWhen tunnel is established you can use the ngrok interface http://127.0.0.1:4040 to inspect the webhooks done via ngrok.\n\n## process\nTo get a handle to the spawned ngrok process use\n```javascript\nngrok.process(); // returns ChildProcess\n```\n\n## how it works\nnpm install downloads ngrok binaries for you platform and puts them into bin folder. You can host binaries yourself and set NGROK_CDN_URL env var before installing ngrok. Or you can force specific arch by setting NGROK_ARCH, eg NGROK_ARCH=freebsdia32\n\nFirst time you create tunnel ngrok process is spawned and runs until you disconnect or when parent process killed. All further tunnels are created or stopped by using internal ngrok api which usually runs on http://127.0.0.1:4040\n\n## contributors\nPlease run ```git update-index --assume-unchanged bin/ngrok``` to not override [ngrok stub](https://github.com/bubenshchykov/ngrok/blob/master/bin/ngrok) in your pr. Unfortunately it can't be gitignored.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/exponent/ngrok.git"
  },
  "scripts": {
    "postinstall": "node ./postinstall.js",
    "postupdate": "node ./postinstall.js",
    "test": "node ./node_modules/mocha/bin/_mocha"
  },
  "version": "2.2.7"
}
