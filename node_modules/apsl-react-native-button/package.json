{
  "_args": [
    [
      {
        "raw": "apsl-react-native-button@^3.0.2",
        "scope": null,
        "escapedName": "apsl-react-native-button",
        "name": "apsl-react-native-button",
        "rawSpec": "^3.0.2",
        "spec": ">=3.0.2 <4.0.0",
        "type": "range"
      },
      "/Users/enrique/Desktop/crypto-markets"
    ]
  ],
  "_from": "apsl-react-native-button@>=3.0.2 <4.0.0",
  "_id": "apsl-react-native-button@3.1.0",
  "_inCache": true,
  "_location": "/apsl-react-native-button",
  "_nodeVersion": "8.1.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/apsl-react-native-button-3.1.0.tgz_1501062558558_0.24758643587119877"
  },
  "_npmUser": {
    "name": "alvaromb",
    "email": "me@alvaromb.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "apsl-react-native-button@^3.0.2",
    "scope": null,
    "escapedName": "apsl-react-native-button",
    "name": "apsl-react-native-button",
    "rawSpec": "^3.0.2",
    "spec": ">=3.0.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/apsl-react-native-button/-/apsl-react-native-button-3.1.0.tgz",
  "_shasum": "8fe6ebf734cc5f1006c6eb1d54370abc3c3833f5",
  "_shrinkwrap": null,
  "_spec": "apsl-react-native-button@^3.0.2",
  "_where": "/Users/enrique/Desktop/crypto-markets",
  "author": {
    "name": "Alvaro Medina Ballester",
    "email": "me@alvaromb.com"
  },
  "bugs": {
    "url": "https://github.com/APSL/react-native-button/issues"
  },
  "dependencies": {
    "lodash.isequal": "^4.1.4",
    "prop-types": "^15.5.10"
  },
  "description": "React Native button component with rounded corners.",
  "devDependencies": {
    "babel-eslint": "^6.0.5",
    "babel-jest": "^15.0.0",
    "babel-plugin-transform-flow-strip-types": "^6.14.0",
    "babel-preset-react-native": "^1.9.0",
    "es6-promise": "^3.3.1",
    "eslint": "^2.13.1",
    "eslint-plugin-react": "^5.2.2",
    "eslint-plugin-react-native": "^1.1.0-beta",
    "jest": "^20.0.0",
    "jest-react-native": "^18.0.0",
    "react": "^15.4.0",
    "react-native": "^0.42.0",
    "react-test-renderer": "^15.4.0",
    "whatwg-fetch": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-5okEAyj/9GjClyoPbOWGxw7W5OMiRMSyWxCSDcm0vhGuukwn5SCi7gvuInk8MPWKKMiUPmyY3dVuHiYI96gXsQ==",
    "shasum": "8fe6ebf734cc5f1006c6eb1d54370abc3c3833f5",
    "tarball": "https://registry.npmjs.org/apsl-react-native-button/-/apsl-react-native-button-3.1.0.tgz"
  },
  "gitHead": "eac9cebade94631a279f5f16e685aa2aa3b0f885",
  "homepage": "https://github.com/APSL/react-native-button#readme",
  "jest": {
    "preset": "jest-react-native",
    "modulePathIgnorePatterns": [
      "Example",
      "node_modules/react-native/node_modules/"
    ],
    "transformIgnorePatterns": [
      "node_modules/(?!react-native|tcomb-form-native|react-native-localization|@exponent/react-native-action-sheet|rnrf-relay-renderer|redux-action-api-utils|frisbee)"
    ]
  },
  "keywords": [
    "react-native",
    "ios",
    "android",
    "react-component",
    "react",
    "button"
  ],
  "license": "MIT",
  "main": "Button.js",
  "maintainers": [
    {
      "name": "alvaromb",
      "email": "me@alvaromb.com"
    }
  ],
  "name": "apsl-react-native-button",
  "optionalDependencies": {},
  "readme": "# apsl-react-native-button\n<img src=\"https://travis-ci.org/APSL/react-native-button.svg?branch=master\" />\n<img src=\"https://img.shields.io/badge/coverage-82%25-green.svg\" />\n<img src=\"https://img.shields.io/npm/dm/apsl-react-native-button.svg\" />\n\nA React Native button component customizable via ``style`` props.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/wiki/APSL/react-native-button/button.png\" alt=\"Button component screenshot\" width=\"400\">\n<img src=\"https://raw.githubusercontent.com/wiki/APSL/react-native-button/and.png\" alt=\"Android Button component screenshot\" width=\"400\">\n</p>\n\nRenders a ``TouchableOpacity`` under iOS and a ``TouchableNativeFeedback`` under Android.\n\n## Install\n`apsl-react-native-button>=2.6.0` needs React Native 0.28 or higher.\n`apsl-react-native-button>=2.5.0` needs React Native 0.25 or higher.\n`apsl-react-native-button<=2.4.2` needs React Native 0.16 or higher.\n\nInstall the package:\n\n```bash\n$ npm i apsl-react-native-button --save\n```\n\nImport the ``Button`` component:\n\n```javascript\nimport Button from 'apsl-react-native-button'\n```\n\n## Usage\n\nProvide ``TouchableWithoutFeedback``' props to the component (including ``style``),\n``textStyle``'s ``StyleSheet`` to customize the inner text and a children node\nto render. You can also provide the ``isLoading`` prop that will dim the button\nand disable it to prevent accidental taps.\n\n```javascript\n<Button style={{backgroundColor: 'red'}} textStyle={{fontSize: 18}}>\n  Hello!\n</Button>\n```\n\nYou can also provide a `<Button>` element with nested children that are not strings\nor `<Text>` elements as long as they are valid React elements or numbers. This helps\nif your project is using another library that provides easy icon integration\nutilizing the `<i>` tag, for instance, as well as various other cases where you are\ncreating visually complex buttons. You may omit the `textStyle` property and apply\nyour own styles to your child elements as you see fit. Multiple children are allowed.\n\n```javascript\n<Button style={{backgroundColor: 'blue'}}>\n  <View style={styles.nestedViewStyle}>\n    <Text style={styles.nestedTextStyle}>Nested views!</Text>\n  </View>\n</Button>\n```\n\n## API\n\n| Prop | Type | Description |\n|------|------|-------------|\n| ``onPress`` | ``func`` | Function to execute when the ``onPress`` event is triggered. |\n| ``onPressIn`` | ``func`` | Function to execute when the ``onPressIn`` event is triggered. |\n| ``onPressOut`` | ``func`` | Function to execute when the ``onPressOut`` event is triggered. |\n| ``onLongPress`` | ``func`` | Function to execute when the ``onLongPress`` event is triggered. |\n| ``textStyle`` | ``TextStylePropTypes`` | The StyleSheet to apply to the inner button text. |\n| ``disabledStyle`` | ``TextStylePropTypes`` | The StyleSheet to apply when disabled. |\n| ``children`` | ``string``, ``number``, ``React.Element``,or ``array`` | The child nodes to render inside the button. If child is ``string`` or ``number``, it will be rendered inside of a ``<Text>`` element with ``textStyle`` applied if present. Multiple children are allowed (``array``).|\n| ``isLoading`` | ``bool`` | Renders an inactive state dimmed button with a spinner if ``true``. |\n| ``isDisabled`` | ``bool`` | Renders an inactive state dimmed button if ``true``. |\n| ``activeOpacity`` | ``Number`` | The button onpressing transparency (Usually with a point value between 0 and 1). |\n| ``activityIndicatorColor`` | ``string`` | Sets the button of the ``ActivityIndicatorIOS`` or ``ProgressBarAndroid`` in the loading state. |\n| ``background`` | ``TouchableNativeFeedback.propTypes.background`` | **Android only**. The background prop of ``TouchableNativeFeedback``. |\nCheck the included example for more options.\n\n## Similar projects\n\n[James Ide](https://github.com/ide/)'s ``react-native-button`` https://github.com/ide/react-native-button/\n\n## License\n\nMIT.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APSL/react-native-button.git"
  },
  "scripts": {
    "lint": "eslint Button.js",
    "test": "npm run lint && jest --verbose"
  },
  "version": "3.1.0"
}
